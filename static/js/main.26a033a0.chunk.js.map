{"version":3,"sources":["components/Verse/Verse.tsx","components/Verse/index.tsx","components/Carousel.tsx","theme.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Verse","text","as","py","fontFamily","textAlign","fontWeight","whiteSpace","Translation","Commentary","allVerses","Carousel","useSpringCarousel","items","map","v","i","id","renderItem","carouselFragment","useListenToCustomEvent","event","eventName","window","scrollTo","SliderItem","children","rest","w","sx","touchAction","SliderWrapper","borderRadius","p","m","boxShadow","Content","isActive","useInViewPort","verse","overflow","translation","commentary","idx","useSpringCarouselContext","getIsActiveItem","getIsNextItem","getIsPrevItem","useState","setIsActive","data","theme","extendTheme","config","initialColorMode","useSystemColorMode","fonts","body","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.26a033a0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Box, Text } from \"@chakra-ui/react\";\n\ntype Props = {\n  text: string;\n};\n\nconst Verse = ({ text }: Props) => {\n  return (\n    <Box as=\"section\" py={2}>\n      <Text\n        fontFamily=\"'Gotu', sans-serif\"\n        textAlign=\"center\"\n        fontWeight=\"semibold\"\n        whiteSpace=\"pre-wrap\"\n      >\n        {text}\n      </Text>\n    </Box>\n  );\n};\n\nconst Translation = ({ text }: Props) => {\n  return (\n    <Box as=\"section\" py={2} whiteSpace=\"pre-wrap\">\n      {text}\n    </Box>\n  );\n};\n\nconst Commentary = ({ text }: Props) => {\n  return (\n    <Box as=\"section\" py={2} whiteSpace=\"pre-wrap\">\n      {text}\n    </Box>\n  );\n};\n\nVerse.Translation = Translation;\nVerse.Commentary = Commentary;\n\nexport default Verse;\n","import Verse from \"./Verse\";\n\nexport default Verse;\n","import { useSpringCarousel } from \"react-spring-carousel-js\";\nimport { Box, Divider, Flex } from \"@chakra-ui/react\";\nimport Verse from \"./Verse\";\nimport { getVerses } from \"./util\";\nimport { useSpringCarouselContext } from \"react-spring-carousel-js\";\nimport { useState } from \"react\";\n\nconst allVerses: any[] = getVerses();\n\nconst Carousel = () => {\n  const { carouselFragment, useListenToCustomEvent } = useSpringCarousel({\n    // withLoop: true,\n    items: allVerses.map((v, i) => ({\n      id: `${i}`,\n      renderItem: (\n        <SliderItem>\n          <Content id={i} />\n        </SliderItem>\n      ),\n    })),\n  });\n\n  useListenToCustomEvent((event) => {\n    if (event.eventName === \"onSlideStartChange\") {\n      window.scrollTo(0, 0);\n    }\n  });\n\n  return <SliderWrapper>{carouselFragment}</SliderWrapper>;\n};\n\nexport default Carousel;\n\nconst SliderItem = ({ children, ...rest }: any) => {\n  return (\n    <Flex\n      // h=\"100%\"\n      w=\"100%\"\n      sx={{ touchAction: \"none\" }}\n      // bg=\"gray\"\n      {...rest}\n    >\n      {children}\n    </Flex>\n  );\n};\n\nconst SliderWrapper = ({ children }: any) => {\n  return (\n    <Box\n      borderRadius={12}\n      p={2}\n      m={2}\n      boxShadow=\"md\"\n      // bg=\"blue\"\n      // h=\"100%\"\n    >\n      {children}\n    </Box>\n  );\n};\n\nconst Content = ({ id }: any) => {\n  const isActive = useInViewPort(id);\n  // if (!isActive) {\n  //   return null;\n  // }\n  const verse = allVerses[id];\n\n  return (\n    <Box overflow=\"auto\" sx={{ touchAction: \"pan-y\" }}>\n      <Box py={2} textAlign=\"center\">\n        अध्याय 1, श्लोक 1\n      </Box>\n      <Divider />\n      <Verse text={verse.text} />\n      <Divider />\n      <Verse.Translation text={verse.translation} />\n      <Divider />\n      {isActive ? <Verse.Commentary text={verse.commentary} /> : null}\n    </Box>\n  );\n};\n\nconst useInViewPort = (idx: number) => {\n  const {\n    getIsActiveItem,\n    useListenToCustomEvent,\n    getIsNextItem,\n    getIsPrevItem,\n  } = useSpringCarouselContext();\n  // console.log(getCurrentActiveItem(), id);\n\n  const [isActive, setIsActive] = useState(getIsActiveItem(\"\" + idx));\n  useListenToCustomEvent((data) => {\n    if (data.eventName === \"onSlideChange\") {\n      const i = \"\" + idx;\n      setIsActive(\n        getIsActiveItem(i)\n        //  || getIsNextItem(i) || getIsPrevItem(i)\n      );\n    }\n  });\n\n  return isActive;\n};\n","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n};\n\nconst theme = extendTheme({\n  config,\n  fonts: {\n    body: \"Poppins,sans-serif\",\n  },\n});\nexport default theme;\n","import Carousel from \"./components/Carousel\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Carousel />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}