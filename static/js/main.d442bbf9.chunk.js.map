{"version":3,"sources":["components/Carousal.tsx","theme.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Carousal","carouselFragment","useSpringCarousel","withLoop","items","id","renderItem","SliderItem","children","rest","css","SliderWrapper","Content","theme","extendTheme","config","initialColorMode","useSystemColorMode","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d442bbf9.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { useSpringCarousel } from \"react-spring-carousel-js\";\nimport { css } from \"@emotion/react\";\n\nconst Carousal = () => {\n  const { carouselFragment } = useSpringCarousel({\n    withLoop: true,\n    items: [\n      {\n        id: \"item-1\",\n        renderItem: (\n          <SliderItem>\n            <Content />\n          </SliderItem>\n        ),\n      },\n      {\n        id: \"item-2\",\n        renderItem: (\n          <SliderItem>\n            <Content />\n          </SliderItem>\n        ),\n      },\n    ],\n  });\n\n  return <SliderWrapper>{carouselFragment}</SliderWrapper>;\n};\n\nexport default Carousal;\n\nconst SliderItem = ({ children, ...rest }: any) => {\n  return (\n    <div\n      css={css`\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 100%;\n        height: 100%;\n        font-size: 24px;\n        min-height: 200px;\n        touch-action: none;\n      `}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst SliderWrapper = ({ children }: any) => {\n  return (\n    <div\n      css={css`\n        border-radius: 12px;\n        overflow: hidden;\n        padding: 16px;\n        margin: 24px;\n        box-shadow: 0 6.7px 5.3px rgba(0, 0, 0, 0.0012),\n          0 12.3px 17.9px rgba(0, 0, 0, 0.062), 0 10px 20px rgba(0, 0, 0, 0.06);\n      `}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst Content = () => {\n  return (\n    <div>\n      Title of the card\n      <br />\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse quibusdam\n      fugiat voluptas veniam quos voluptatem perferendis sint odio ratione? Amet\n      blanditiis totam, tenetur dolorem dicta facilis beatae. Optio, odio\n      blanditiis!\n      <br />\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse quibusdam\n      fugiat voluptas veniam quos voluptatem perferendis sint odio ratione? Amet\n      blanditiis totam, tenetur dolorem dicta facilis beatae. Optio, odio\n      blanditiis!\n      <br />\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse quibusdam\n      fugiat voluptas veniam quos voluptatem perferendis sint odio ratione? Amet\n      blanditiis totam, tenetur dolorem dicta facilis beatae. Optio, odio\n      blanditiis!\n      <br />\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse quibusdam\n      fugiat voluptas veniam quos voluptatem perferendis sint odio ratione? Amet\n      blanditiis totam, tenetur dolorem dicta facilis beatae. Optio, odio\n      blanditiis!\n      <br />\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse quibusdam\n      fugiat voluptas veniam quos voluptatem perferendis sint odio ratione? Amet\n      blanditiis totam, tenetur dolorem dicta facilis beatae. Optio, odio\n      blanditiis!\n      <br />\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse quibusdam\n      fugiat voluptas veniam quos voluptatem perferendis sint odio ratione? Amet\n      blanditiis totam, tenetur dolorem dicta facilis beatae. Optio, odio\n      blanditiis!\n      <br />\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse quibusdam\n      fugiat voluptas veniam quos voluptatem perferendis sint odio ratione? Amet\n      blanditiis totam, tenetur dolorem dicta facilis beatae. Optio, odio\n      blanditiis!\n      <br />\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse quibusdam\n      fugiat voluptas veniam quos voluptatem perferendis sint odio ratione? Amet\n      blanditiis totam, tenetur dolorem dicta facilis beatae. Optio, odio\n      blanditiis!\n      <br />\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse quibusdam\n      fugiat voluptas veniam quos voluptatem perferendis sint odio ratione? Amet\n      blanditiis totam, tenetur dolorem dicta facilis beatae. Optio, odio\n      blanditiis!\n      <br />\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse quibusdam\n      fugiat voluptas veniam quos voluptatem perferendis sint odio ratione? Amet\n      blanditiis totam, tenetur dolorem dicta facilis beatae. Optio, odio\n      blanditiis!\n      <br />\n    </div>\n  );\n};\n","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n};\n\nconst theme = extendTheme({ config });\nexport default theme;\n","import Carousal from \"./components/Carousal\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Carousal />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}